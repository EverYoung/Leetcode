1. Two Passes
Same idea as checking if a linkedlist is palindrome. First we use slow and fast pointers two find the middle node and reverse the second
half of the linkedlist. Then we simply treaverse the two halves at the same time and re-link them into required order.

class Solution {
public:
    void reorderList(ListNode* head) {
        if(head == NULL || head->next == NULL) return;
        ListNode *fast = head, *slow = head;
        while(fast->next != NULL && fast->next->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        ListNode *head2 = reverse(slow->next);
        slow->next = NULL;
        ListNode *head1 = head, *temp1 = NULL, *temp2 = NULL;
        while(head2->next != NULL){
            temp1 = head1->next;
            temp2 = head2->next;
            head1->next = head2;
            head1 = temp1;
            head2->next = head1;
            head2 = temp2;
        }
        temp1 = head1->next;
        head1->next = head2;
        if(temp1 != NULL) head2->next = temp1;
    }
    
    ListNode* reverse(ListNode* head){
        ListNode *prev = NULL, *cur = head, *temp = NULL;
        while(cur != NULL){
            temp = cur->next;
            cur->next = prev;
            prev = cur;
            cur = temp;
        }
        return prev;
    }
};


class Solution {
public:
    void reorderList(ListNode* head) {
        if(head == NULL || head->next == NULL) return;
        ListNode *fast = head, *slow = head;
        while(fast->next != NULL && fast->next->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        ListNode *head2 = reverse(slow->next);
        slow->next = NULL;
        ListNode *head1 = head->next, *cur = head;
        while(head1 != NULL && head2 != NULL){
            cur->next = head2;
            cur = cur->next;
            head2 = head2->next;
            cur->next = head1;
            cur = cur->next;
            head1 = head1->next;
        }
        if(head2 != NULL) cur->next = head2;
    }
    
    ListNode* reverse(ListNode* head){
        ListNode *prev = NULL, *cur = head, *temp = NULL;
        while(cur != NULL){
            temp = cur->next;
            cur->next = prev;
            prev = cur;
            cur = temp;
        }
        return prev;
    }
};
