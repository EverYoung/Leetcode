Dynamic Programming.
Similar problem to Regular Expression Match.

Use matrix to store results at each position of i,j which correspond to p[0,1,...,i-1] and s[0,1,...j-1].
3 Cases:
Case 1: p[i-1]==s[j-1] or p[i-1]=='?': dp[i][j] = dp[i-1][j-1].
Case 2: p[i-1]=='*': 2 sub-cases:
        1. '*' -> empty: dp[i][j] = dp[i-1][j];
        2. '*' -> at least 1 chracter: dp[i][j] = dp[i][j-1].
        Totally, dp[i][j] = dp[i-1][j] || dp[i][j-1]
Case 3: p[i-1]!=s[j-1] and p[i-1]!='?' dp[i][j] = false;

Code:
class Solution {
public:
    bool isMatch(string s, string p) {
        int n = p.size(), m = s.size();
        vector<vector<bool>> dp(n+1, vector<bool>(m+1, false));
        dp[0][0] = true;
        for(int i=1; i<=n; i++){
            if(p[i-1]=='*') dp[i][0] = dp[i-1][0];
            else dp[i][0] = false;
        }
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(p[i-1]==s[j-1] || p[i-1]=='?') dp[i][j] = dp[i-1][j-1];
                else if(p[i-1]=='*') dp[i][j] = dp[i-1][j] || dp[i][j-1];
            }
        }
        return dp[n][m];
    }
};

Matrix can be simplified to array:
class Solution {
public:
    bool isMatch(string s, string p) {
        int n = p.size(), m = s.size();
        vector<bool> dp(m+1, false);
        dp[0] = true;
        for(int i=1; i<=n; i++){
            int prev = dp[0];
            if(p[i-1]!='*') dp[0] = false; 
            for(int j=1; j<=m; j++){
                int temp = dp[j];
                if(p[i-1]==s[j-1] || p[i-1]=='?') dp[j] = prev;
                else if(p[i-1]=='*') dp[j] = dp[j-1] || dp[j];
                else dp[j] = false;
                prev = temp;
            }
        }
        return dp[m];
    }
};
