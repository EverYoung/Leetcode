1. Backtracking

class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        for(int i = 0; i < board.size(); i++){
            for(int j = 0; j < board[0].size(); j++){
                if(dfs(board, word, 0, i, j)) return true;
            }
        }
        return false;
    }
    
    bool dfs(vector<vector<char>>& board, 
             string& word, 
             int char_idx, 
             int row_idx, 
             int col_idx){
        char c = word[char_idx];
        if(row_idx < 0 || col_idx < 0 || row_idx >= board.size() || col_idx >= board[0].size() || board[row_idx][col_idx] != c)
            return false;
        if(char_idx == word.size() - 1) return true;
        board[row_idx][col_idx] = '*';
        bool res = dfs(board, word, char_idx + 1, row_idx - 1, col_idx) 
            || dfs(board, word, char_idx + 1, row_idx, col_idx - 1) 
            || dfs(board, word, char_idx + 1, row_idx + 1, col_idx) 
            || dfs(board, word, char_idx + 1, row_idx, col_idx + 1);
        board[row_idx][col_idx] = c;
        return res;
    }
};
