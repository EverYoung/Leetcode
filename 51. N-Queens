1. DFS

class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res;
        string col(n, '.');
        vector<string> sol(n, col);
        vector<pair<int, int>> chosen;
        dfs(res, sol, chosen, 0);
        return res;
    }
    
    void dfs(vector<vector<string>>& res, vector<string>& sol, vector<pair<int, int>>& chosen, int row){
        if(row == sol.size()){
            res.push_back(sol);
            return;
        }
        
        int range = sol.size();
        for(int i = 0; i < range; i++){
            if(isValid(chosen, i, row)){
                sol[i][row] = 'Q';
                chosen.push_back(make_pair(i, row));
                dfs(res, sol, chosen, row + 1);
                sol[i][row] = '.';
                chosen.pop_back();
            }
        }
    }
    
    bool isValid(vector<pair<int, int>>& chosen, int x, int y){
        for(auto p : chosen){
            int p_x = p.first, p_y = p.second;
            if(x == p_x || y == p_y || x + y == p_x + p_y || x - y == p_x - p_y) return false;
        }
        return true;
    }
};



