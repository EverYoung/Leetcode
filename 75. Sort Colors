1. Counting sort;
Since we only have 3 values in the array, and we are asked to sort them. We already know there relative order, and we can just count the 
number of those values in the array and place them in order in the array.

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int red = 0, white = 0, blue = 0;
        for(int num : nums){
            if(num == 0) ++red;
            else if(num == 1) ++white;
            else ++blue;
        }
        int index = 0;
        while(red > 0){
            nums[index++] = 0;
            --red;
        }
        while(white > 0){
            nums[index++] = 1;
            --white;
        }
        while(blue > 0){
            nums[index++] = 2;
            --blue;
        }
    }
};

2. Twice Two Partitions

3. One-pass Three Partition
Left pointer indicates that every elements on its left is 0. Right pointer indicates that every elements on its right is 2. We iterate
throught the array, if we encounter a 0, we swap it to where left pointer is pointing, and if we encounter a 2, we swap it to where right
pointer is pointing. After swap, left increase or right decrease. And we only go to next position to when we swap with left or we encounter
a 1. This is because on the left of the current position, every elements should be 1 or 0, so even though we swap with left pointer, 
the current position will have 1.

class Solution {
public:
    void sortColors(vector<int>& nums) {
        if(nums.size() == 0) return;
        int ptr = 0, left = 0, right = nums.size() - 1;
        while(ptr <= right){
            if(nums[ptr] == 0){
                std::swap(nums[ptr], nums[left]);
                left++;
                ptr++;
            }
            else if(nums[ptr] == 2){
                std::swap(nums[ptr], nums[right]);
                right--;
            }
            else ptr++;
        }
    }
};
