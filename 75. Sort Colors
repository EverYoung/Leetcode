1. Counting sort;
Since we only have 3 values in the array, and we are asked to sort them. We already know there relative order, and we can just count the 
number of those values in the array and place them in order in the array.

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int red = 0, white = 0, blue = 0;
        for(int num : nums){
            if(num == 0) ++red;
            else if(num == 1) ++white;
            else ++blue;
        }
        int index = 0;
        while(red > 0){
            nums[index++] = 0;
            --red;
        }
        while(white > 0){
            nums[index++] = 1;
            --white;
        }
        while(blue > 0){
            nums[index++] = 2;
            --blue;
        }
    }
};

2. Dutch Flag Partition: move values less than middle value to the front and move values larger than middle value to the back. Leave the 
middle values as they are, eventually they will be swap to where they should be.

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size();
        int ptr1 = 0, ptr2 = 0, ptr3 = n - 1;
        while(ptr1 <= ptr3){
            if(nums[ptr1] < 1){
                swap(nums[ptr1], nums[ptr2]);
                ++ptr1;
                ++ptr2;
            }
            else if(nums[ptr1] > 1){
                swap(nums[ptr1], nums[ptr3]);
                --ptr3;
            }
            else ++ptr1;
        }
    }
};
