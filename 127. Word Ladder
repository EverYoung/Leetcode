1. BFS
Consider one word as a node in graph, and words that only have one character different from each other are adjacent. Then we can use a
BFS starting from the start word to find the end word. The level the end word is in equals to the length of word ladder.

class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict;
        for(string str : wordList){
            dict.insert(str);
        }
        if(dict.find(endWord) == dict.end()) return 0;
        
        int len = 2;
        queue<string> q;
        q.push(beginWord);
        while(!q.empty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                string cur = q.front();
                q.pop();
                // For each word, try to modify every character into other 25.
                for(int j = 0; j < cur.size(); j++){
                    char temp = cur[j];
                    for(char c = 'a'; c <= 'z'; c++){
                        if(cur[j] != c){
                            cur[j] = c;
                            if(dict.find(cur) != dict.end()){
                                if(cur == endWord) return len;
                                dict.erase(cur);
                                q.push(cur);
                            }
                        }
                    }
                    cur[j] = temp;
                }
            }
            // Next level
            len++;
        }
        return 0;
    }
};

2. Bidirectional BFS
Use two sets instead of queues because we want to check if forward and backward BFS come to the same level or not, by checking if the 
current word branched out from one set is in the other set. If so, it means that two BFS come to the same level.
Besides, at each level of whatever forward or backward BFS, we need to use another set to store the current level words and replace the 
original set. This is the way to update the set, because we can't pop elements from set as what we can do with queue.

class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict;
        for(string str : wordList){
            dict.insert(str);
        }
        if(dict.find(endWord) == dict.end()) return 0;
        
        unordered_set<string> q1;
        unordered_set<string> q2;
        q1.insert(beginWord);
        q2.insert(endWord);
        
        unordered_set<string> visited;
        int step = 1;
        while(!q1.empty() && !q2.empty()){
            if(q1.size() > q2.size()) std::swap(q1, q2);
            
            unordered_set<string> cur_level;
            for(string cur_word : q1){
                for(int i = 0; i < cur_word.size(); i++){
                    char temp = cur_word[i];
                    for(char c = 'a'; c <= 'z'; c++){
                        cur_word[i] = c;
                        if(q2.find(cur_word) != q2.end())
                            return step + 1;
                        if(visited.find(cur_word) == visited.end() && dict.find(cur_word) != dict.end()){
                            cur_level.insert(cur_word);
                            visited.insert(cur_word);
                        }
                    }
                    cur_word[i] = temp;
                }
            }
            std::swap(q1, cur_level);
            step++;
        }
        return 0;
    }
};
