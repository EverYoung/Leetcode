1. BFS
Consider one word as a node in graph, and words that only have one character different from each other are adjacent. Then we can use a
BFS starting from the start word to find the end word. The level the end word is in equals to the length of word ladder.

class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict;
        for(string str : wordList){
            dict.insert(str);
        }
        if(dict.find(endWord) == dict.end()) return 0;
        
        int len = 2;
        queue<string> q;
        q.push(beginWord);
        while(!q.empty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                string cur = q.front();
                q.pop();
                // For each word, try to modify every character into other 25.
                for(int j = 0; j < cur.size(); j++){
                    char temp = cur[j];
                    for(char c = 'a'; c <= 'z'; c++){
                        if(cur[j] != c){
                            cur[j] = c;
                            if(dict.find(cur) != dict.end()){
                                if(cur == endWord) return len;
                                dict.erase(cur);
                                q.push(cur);
                            }
                        }
                    }
                    cur[j] = temp;
                }
            }
            // Next level
            len++;
        }
        return 0;
    }
};
