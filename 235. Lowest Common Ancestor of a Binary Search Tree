1. Recusive:
Traversal:
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == p || root == q) return root;
        if(p->val > root->val && q->val > root->val) return lowestCommonAncestor(root->right, p, q);
        if(p->val < root->val && q->val < root->val) return lowestCommonAncestor(root->left, p, q);
        return root;
    }
};

If not BST, that is for general tree structure:
Divide & Conquer:
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root || root == p || root == q) return root;
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        if(left && right) return root;
        if(left) return left;
        if(right) return right;
        return NULL;
    }
};

2. Iterative:

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        TreeNode* cur = root;
        while(cur){
            if(p->val > cur->val && q->val > cur->val) cur = cur->right;
            else if(p->val < cur->val && q->val < cur->val) cur = cur->left;
            else return cur;
        }
        
    }
};
