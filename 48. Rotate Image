1. Straightforward Rotate

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size() - 1;
        for(int j = 0; j < (n + 1) / 2; j++){
            for(int i = 0; i < n - 2 * j; i++){
                int temp = matrix[j][j + i];
                matrix[j][j + i] = matrix[n - j - i][j];
                matrix[n - j - i][j] = matrix[n - j][n - j - i];
                matrix[n - j][n - j - i] = matrix[j + i][n - j];
                matrix[j + i][n - j] = temp;
            }
        }
    }
};


2. Reverse and Swap
First reverse the matrix upside down, and then swap the symmetric elements

1 2 3        7 8 9      7 4 1
4 5 6   =>   4 5 6  =>  8 5 2
7 8 9        1 2 3      9 6 3

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        reverse(matrix.begin(), matrix.end());
        for(int i = 0; i < matrix.size(); i++){
            for(int j = i; j < matrix.size(); j++){
                swap(matrix[i][j], matrix[j][i]);
            }
        }
    }
};
