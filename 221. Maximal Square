Dynamic Programming.

Create a matrix dp with size n+1*m+1, each element dp[i][j] means, in a submatrix of the original matrix, say matrix(i-1,j-1), the
maximal square's length of edge.
When we interate through the whole matrix, for each element dp[i][j], if matrix[i-1][j-1]==1, then it is possible that the current element
can be a part of a bigger square, so we look at dp[i-1][j], dp[i][j-1] and dp[i-1][j-1], the size of the current square can be depends on 
the minimum of thse three elements. The size of the current square can be as large as dp(i, j)=min(dp(i−1, j), dp(i−1, j−1), dp(i, j−1))+1.
And for each element, we update another variable maxSquare to store the maximal sqaure so far.

Code:
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int maxSquare = 0;
        int n = matrix.size();
        if(n==0) return maxSquare;
        int m = matrix[0].size();
        //vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        vector<int> dp(n+1);
        int prev = 0;
        for(int j=1; j<=m; j++){
            for(int i=1; i<=n; i++){
                int temp = dp[i];
                if(matrix[i-1][j-1]=='1'){
                    dp[i] = min(dp[i], min(dp[i-1], prev)) + 1;
                    maxSquare = max(maxSquare, dp[i]*dp[i]);
                }
                else dp[i] = 0;
                prev = temp;
            }
        }
        return maxSquare;
    }
};
