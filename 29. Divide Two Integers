Bit Manipulation:
Every time keep shifting divisor to the right for 1 (multiply divisor by 2) until it becomes the largest number that is less than dividend.
By largest number, it is a number that is at most half of dividend. Then minus this number from dividend and do the same thing again, until
dividend is no longer larger than divisor.

One edge case is that dividend = INT_MIN and divisor = -1, for which the result is beyond the upper bound of an Integer.

class Solution {
public:
    int divide(int dividend, int divisor) {
        if(divisor == 0 || dividend == INT_MIN && divisor == -1) return INT_MAX;
        long long abs_dividend = labs(dividend);
        long long abs_divisor = labs(divisor);
        int sign = (divisor > 0 && dividend < 0) || (divisor < 0 && dividend > 0) ? -1 : 1;
        int res = 0;
        while(abs_dividend >= abs_divisor){
            long long temp = abs_divisor, mult = 1;
            while(abs_dividend >= (temp << 1)){
                temp = temp << 1;
                mult = mult << 1;
            }
            abs_dividend -= temp;
            res += mult;
        }
        return res * sign;
    }
};
