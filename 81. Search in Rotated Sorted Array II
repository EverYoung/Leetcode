Binary Search. A follow up problem of problem Search in Rotated Sorted Array I, now we have duplicate elements in the array.

So the only differece made by duplicate elements is the judgement whether we go to the left half or the right half. Because we may now have
elements with same values as the middle one after rotated, i.e. [1,1,3,1], which affect the criteria for deciding which half to go next.

Since the only situation that make difference is when the leftmost and the rightmost elements are the same to the middle one, so my idea is
to just skip these element and find an element with different values. Also, since we compare middle to the target, skip those elements on
both sides won't affect the result.

Code:

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        if(nums.size() == 0) return false;
        int left = 0, right = nums.size() - 1;
        while(left<=right){
            int mid = left + (right - left) / 2;
            while(nums[mid] == nums[left] && mid != left) left++;
            while(nums[mid] == nums[right] && mid != right) right--;
            if(nums[mid] == target) return true;
            if(nums[mid] <= nums[right]){
                if(nums[mid] < target && target <= nums[right]) left = mid + 1;
                else right = mid - 1;
            }
            else if(nums[mid] >= nums[left]){
                if(nums[mid] > target && target >= nums[left]) right = mid - 1;
                else left = mid + 1;
            }
        }
        return false;
    }
};
