1. Deterministic Finite Automata:
When we have finite characters in a string and want to validate its patter, we can use a DFA. DFA is like a state machine. We define 
several states and define the transition at each state by different input. 

class Solution {
public:
    bool isNumber(string s) {
        // Input order -> {+/-, ., digit, e, blank, others}
        vector<vector<int>> state{
            {1, 2, 3, -1, 0, -1},    //S0
            {-1, 2, 3, -1, -1, -1},  //S1
            {-1, -1, 4, -1, -1, -1}, //S2
            {-1, 4, 3, 5, 8, -1},   //S3
            {-1, -1, 4, 5, 8, -1},  //S4
            {6, -1, 7, -1, -1, -1},  //S5
            {-1, -1, 7, -1, -1, -1}, //S6
            {-1, -1, 7, -1, 8, -1},  //S7
            {-1, -1, -1, -1, 8, -1}, //S8
        };
        bitset<9> validState("110011000");
        int curState = 0;
        for(char c: s){
            
            int input = charToInput(c);
            curState = state[curState][input];
            cout << curState <<endl;
            if(curState == -1) return false;
        }
        return validState[curState];
    }
    
    int charToInput(char c){
        if(c == '+' || c == '-') return 0;
        else if(c == '.') return 1;
        else if(c >= '0' && c <= '9') return 2;
        else if(c == 'e') return 3;
        else if(c == ' ') return 4;
        else return 5;
    }
};

2. Straight forward traversal solution
Traverse the whole string, and we can consider the string in two parts if there exists an 'e'. One part is in front of 'e', and the other
part is behind 'e'. So during the traversal we do the judgement for each character in the following order: 
1. If current character is a blank.
2. If current character is a '+' or '-'. (first character)
3. If current character is a '.' or a number. In this part we also count the number of '.' and numbers respectively to see whether they
satisfy the format. If is either not a dot or a number, we possibly come to an 'e'.
4. If current character is an 'e'. If not, return false; othterwise we traverse the rest and find numbers. No dots are allowed after 'e'.
5. If current character is trailing blank.

class Solution {
public:
    bool isNumber(string s) {
        int ptr = 0;
        while(s[ptr] == ' ' && ptr < s.size()) ++ptr;
        if(s[ptr] == '+' || s[ptr] == '-') ++ptr;
        int numCounter = 0, pointCounter = 0;
        while(((s[ptr] >= '0' && s[ptr] <= '9') || s[ptr] == '.') && ptr < s.size()){
            if(s[ptr] == '.') ++pointCounter;
            else ++numCounter;
            ++ptr;
        }
        if(pointCounter > 1 || numCounter < 1) return false;
        if(s[ptr] == 'e'){
            ++ptr;
            if(s[ptr] == '+' || s[ptr] == '-') ++ptr;
            numCounter = 0;
            while(s[ptr] >= '0' && s[ptr] <= '9'&& ptr < s.size()){
                ++numCounter;
                ++ptr;
            }
            if(numCounter < 1) return false;
            
        }
        while(s[ptr] == ' ' && ptr < s.size()) ++ptr;
        return ptr == s.size();
    }
};
