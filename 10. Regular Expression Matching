Dynamic Programming.

This problem has a complicated logic.
First we use a 2D matrix "dp" with size (n+1)*(m+1) to store the bool value. Each element dp[i][j] means the subsequence of s[0,1,...,i-1]
and p[0,1,...,j-1] match or not.
Basically we can divide this problem into 3 cases.
Case 1: p[i-1]==s[j-1] or p[i-1]=='.'. In this case, whether match depends on s[0,1,...,i-2] and p[0,1,...,j-2], so dp[i][j] = dp[i-1][j-1]
Case 2: p[i-1]=='*', in this case, there are 2 sub-cases:
        1. If p[i-2]==s[j-1] or p[i-2]=='.':
           The idea here is if '*' repeats former character once which matches one corresponding character in s[0,1,...,i-1], we can take 
           this one out and see how it matches for s[0,1,...,i-2]. When there is no more character in s's subsequence matches p[i-2], at
           this time, the '*' makes it empty.
           (1) the '*' repeats p[i-2] for multiple times: dp[i][j] = dp[i][j-1].
           (2) the '*' makes 'p[i-2]*' empty: dp[i][j] = dp[i-2][j].
        2. Else: the '*' must make 'p[i-2]*' empty: dp[i][j] = dp[i-2][j].
Case 3: Else(p[i-1]!=s[j-1] and p[i-1]!='.'): dp[i][j] = false.

Code:
class Solution {
public:
    bool isMatch(string s, string p) {
        int n = p.size(), m = s.size();
        vector<vector<bool>> dp(n+1, vector<bool>(m+1, false));
        dp[0][0] = true;
        for(int i=1; i<=n; i++){
            if(p[i-1]=='*') dp[i][0] = dp[i-2][0];
            else dp[i][0] = false;
        }
        for(int j=1; j<=m; j++){
            dp[0][j] = false;
        }
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(p[i-1]==s[j-1] || p[i-1]=='.') dp[i][j] = dp[i-1][j-1];
                else if(p[i-1]=='*'){
                    if(p[i-2]==s[j-1] || p[i-2]=='.') dp[i][j] = dp[i-2][j] || dp[i][j-1];
                    else dp[i][j] = dp[i-2][j];
                }
                else dp[i][j] = false;
            }
        }
        return dp[n][m];
    }
};
