class Solution {
public:
    struct mycomparator{
        bool operator()(const pair<int, int>& left, const pair<int, int>& right){
            return left.second > right.second;
        }
    };
    
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> count;
        for(int i : nums) count[i]++;
        priority_queue<pair<int, int>, vector<pair<int, int>>, mycomparator> pq;
        for(auto pair : count){
            if(pq.size() < k) pq.push(pair);
            else if(pq.size() == k && pair.second > pq.top().second){
                pq.pop();
                pq.push(pair);
            }
        }
        
        vector<int> results;
        while(!pq.empty()){
            results.push_back(pq.top().first);
            pq.pop();
        }
        return results;
    }
};
