class RandomizedSet {
public:
    /** Initialize your data structure here. */
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(indexes.find(val) == indexes.end()){
            indexes.insert(make_pair(val, nums.size()));
            nums.emplace_back(val);
            return true;
        }
        else return false;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(indexes.find(val) != indexes.end()){
            int last = nums.back();
            indexes[last] = indexes[val];
            nums[indexes[val]] = last;
            nums.pop_back();
            indexes.erase(val);
            return true;
        }
        else return false;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        int random = rand() % nums.size();
        return nums[random];
    }
private:
    unordered_map<int, int> indexes;
    vector<int> nums;
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * bool param_1 = obj.insert(val);
 * bool param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
