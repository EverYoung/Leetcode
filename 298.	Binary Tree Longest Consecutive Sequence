1. DFS bottom up

class Solution {
public:
    int longestConsecutive(TreeNode* root) {
        dfs(root);
        return max_len;
    }
    
    int dfs(TreeNode* root){
        if(!root) return 0;
        int left_len = dfs(root->left) + 1, right_len = dfs(root->right) + 1;
        if(root->left && root->val + 1 != root->left->val) left_len = 1;
        if(root->right && root->val + 1 != root->right->val) right_len = 1;
        int len = max(left_len, right_len);
        max_len = max(max_len, len);
        return len;
    }

private:
    int max_len = 0;
};

2. DFS top down

class Solution {
public:
    int longestConsecutive(TreeNode* root) {
        return dfs(root, root, 0);
    }
    
    int dfs(TreeNode* cur, TreeNode* parent, int len){
        if(!cur) return 0;
        if(cur->val == parent->val + 1) len += 1;
        else len = 1;
        return max(len, max(dfs(cur->left, cur, len), dfs(cur->right, cur, len)));
    }
};

class Solution {
public:
    int longestConsecutive(TreeNode* root) {
        int result = 0;
        dfs(root, 0, result);
        return result;
    }
    
    void dfs(TreeNode* cur, int len, int& result){
        if(!cur) return ;
        len++;
        result = max(result, len);
        if(cur->left){
            if(cur->left->val == cur->val + 1) dfs(cur->left, len, result);
            else dfs(cur->left, 0, result);
        }
        if(cur->right){
            if(cur->right->val == cur->val + 1) dfs(cur->right, len, result);
            else dfs(cur->right, 0, result);
        }
    }
};
