1. Recurisve
Because we are traversing a binary tree, we only need to recursively call the function for two children once.

Divide & Conquer:
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        if(root == NULL) return res;
        res.push_back(root->val);
        vector<int> left = preorderTraversal(root->left);
        vector<int> right = preorderTraversal(root->right);
        for(int node : left) res.push_back(node);
        for(int node : right) res.push_back(node);
        return res;
    }
};

Traversal:
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        if(root == NULL) return res;
        helper(root, res);
        return res;
    }
    
    void helper(TreeNode* cur, vector<int>& res){
        if(!cur) return;
        
        res.push_back(cur->val);
        helper(cur->left, res);
        helper(cur->right, res);
    }
};

2. Use Stack
Use a stack to implement a DFS traversal. Push right child before left child so that left child is always on top of right child and will
be reached before right child.

class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        if(root == NULL) return res;
        
        stack<TreeNode*> st;
        st.push(root);
        while(!st.empty()){
            TreeNode* cur = st.top();
            st.pop();
            res.push_back(cur->val);
            if(cur->right != NULL) st.push(cur->right);
            if(cur->left != NULL) st.push(cur->left);
        }
        return res;
    }
};

3. Morris Traversal


class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        if(root == NULL) return res;
        
        while(root != NULL){
            if(root->left == NULL){
                res.push_back(root->val);
                root = root->right;
            }
            else{
                TreeNode* predecessor = root->left;
                while(predecessor->right != NULL && predecessor->right != root){
                    predecessor = predecessor->right;
                }
                if(predecessor->right == NULL){
                    res.push_back(root->val);
                    predecessor->right = root;
                    root = root->left;
                }
                else{
                    predecessor->right = NULL;
                    root = root->right;
                }
            }
        }
        return res;
    }
};
