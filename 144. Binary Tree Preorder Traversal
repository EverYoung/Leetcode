1. Recurisve
Because we are traversing a binary tree, we only need to recursively call the function for two children once.

class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        if(root == NULL) return res;
        //stack<int> st;
        //st.push(root);
        res.push_back(root->val);
        TreeNode* left = root->left;
        TreeNode* right = root->right;
        vector<int> res_left = preorderTraversal(left);
        vector<int> res_right = preorderTraversal(right);
        for(int i = 0; i < res_left.size(); ++i){
            res.push_back(res_left[i]);
        }
        for(int i = 0; i < res_right.size(); ++i){
            res.push_back(res_right[i]);
        }
        return res;
    }
};

2. Use Stack
Use a stack to implement a DFS traversal. Push right child before left child so that left child is always on top of right child and will
be reached before right child.

class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        if(root == NULL) return res;
        
        stack<TreeNode*> st;
        st.push(root);
        while(!st.empty()){
            TreeNode* cur = st.top();
            st.pop();
            res.push_back(cur->val);
            if(cur->right != NULL) st.push(cur->right);
            if(cur->left != NULL) st.push(cur->left);
        }
        return res;
    }
};
