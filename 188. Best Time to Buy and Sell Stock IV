Dynamic Programming.

Similar to Best Time to Buy and Sell Stock III. Generalize solution to k transactions we get:

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        if(n < 2) return 0;
        vector<vector<int>> dp(k+1, vector<int>(n, 0));
        for(int ki = 1; ki <= k; ki++){
            int diff = dp[ki-1][0] - prices[0];
            for(int i = 1; i < n; i++){
                dp[ki][i] = max(dp[ki][i-1], prices[i] + diff);
                diff = max(diff, dp[ki-1][i] - prices[i]);
            }
        }
        return dp[k][n-1];
    }
};

Second method is a generalized concise DP solution:

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        if(n < 2 || k == 0) return 0;
        vector<int> dp(2*k);
        for(int i = 0; i < 2*k; ++i){
            dp[i] = i%2 == 0 ? INT_MIN : 0;
        }
        for(int j = 0; j < n; ++j){
            for(int i = 2*k - 1; i >= 0; --i){
                int price = i%2 == 0 ? -prices[j] : prices[j];
                dp[i] = max(dp[i], dp[i-1] + price);
            }
        }
        return dp[2*k-1];
    }
};

However, neither of these two fail a test case in which the k is extremely large and memo exceeds the memory limit. A way to solve this 
is that if k >= n/2, which means that the permitted transactions are more than we buy and sell right away so that we can just buy and
sell without transaction times limit. Then in this case, the problem is transfered to Best Time to Buy and Sell Stock II. So we add the
following function into our solution.

  ...
  if(k >= n / 2) quick(prices);
  ...
  
  int quick(vector<int>& prices) {
        if(prices.size()<1) return 0;
        int profit = 0, tempProfit = 0;
        int ptr1 = 0, ptr2 = 1;
        while(ptr2 < prices.size()){
            if(prices[ptr2] < prices[ptr2-1]){
                profit += prices[ptr2-1] - prices[ptr1];
                ptr1 = ptr2;
            }
            else if(ptr2 == prices.size() - 1){
                profit += prices[ptr2] - prices[ptr1];
            }
            ptr2++;
        }
        return profit;
    }
