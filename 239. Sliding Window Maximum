1. Straight forward idea
We need to find each maximum value in each window as it slides to the right. A brute-force solution is that we loop through all numbers in 
a window and find the maximum value. However, observe that each time window slides to the right, we absort the leftmost value in the 
window and take in one new value on the right. Then what we should do is much simpler, the maximum value only changes when 2 cases happen:
(1) The previous maximum value was absorted from the window and we need to find a new maximum value in the new window.
(2) The previous maximum value is still inside the window, but the incoming value is larger than it, so we update the maximum value.
It is possible that we absort the former maximum value and the incoming value becomes the maximum value though, and it doesn't affect what
we should do.

Code:

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> res;
        if(n == 0) return res;
        int max_index = -1;
        for(int i = 0; i <= n - k; ++i){
            int range_left = i, range_right = i + k - 1;
            if(max_index < range_left) max_index = findMax(nums, range_left, range_right);
            else max_index = nums[max_index] > nums[range_right] ? max_index : range_right;
            res.push_back(nums[max_index]);
        }
        return res;
    }
    
    int findMax(vector<int>& nums, int begin, int end){
        int max_index = begin;
        for(int i = begin + 1; i <= end; ++i){
            if(nums[i] >= nums[max_index])
                max_index = i;
        }
        return max_index;
    }
};

2. Use deque
Store index in deque, keep k elements in deque (pop the front element when adding new one causing deque to have more than k elements). Each
time when adding new element, if the former elements in deque correspond to smaller values in original array, pop them out, always keeps 
the front of deque to be the index of maximum value in the current window.

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> res;
        if(n == 0) return res;
        deque<int> dq;
        for(int i = 0; i < n; ++i){
            if(!dq.empty() && dq.front() == i-k) dq.pop_front();
            while(!dq.empty() && nums[dq.back()] <= nums[i]) dq.pop_back();
            dq.push_back(i);
            if(i >= k-1) res.push_back(nums[dq.front()]);
        }
        return res;
    }
};

3. Use multiset
Always keep k elements in the multiset and store the value instead of index. But we store the negative of the values, because multiset
always put the smallest value at the front, so we can have the maximum value at the front if we store the nagetive of those values.

4. Use heap / TreeMap
