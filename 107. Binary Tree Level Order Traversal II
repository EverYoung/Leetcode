1. BFS with NULL as marker

class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> res;
        vector<int> level;
        if(!root) return res;
        queue<TreeNode*> q;
        q.push(root);
        q.push(NULL);
        while(!q.empty()){
            TreeNode* cur = q.front();
            q.pop();
            if(cur == NULL){
                if(!q.empty()) q.push(NULL);
                res.push_back(level);
                level.clear();
            }
            else{
                level.push_back(cur->val);
                if(cur->left) q.push(cur->left);
                if(cur->right) q.push(cur->right);
            }
            
        }
        reverse(res.begin(), res.end());
        return res;
    }
};

2. BFS using recursing

class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> res;
        if(!root) return res;
        bfs(root, res, 1);
        reverse(res.begin(), res.end());
        return res;
    }
    
    void bfs(TreeNode* cur, vector<vector<int>>& res, int cur_level){
        if(!cur) return;
        if(cur_level > res.size()){
            res.push_back(vector<int>());
        }
        res[cur_level - 1].push_back(cur->val);
        bfs(cur->left, res, cur_level + 1);
        bfs(cur->right, res, cur_level + 1);
    }
};
