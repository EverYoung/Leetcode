C++:
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* res = new ListNode(0);
        ListNode* dummy = res;
        ListNode *cur1 = l1, *cur2 = l2;
        int carry = 0;
        while(cur1 != NULL && cur2 != NULL){
            int sum = cur1->val + cur2->val + carry;
            carry = sum / 10;
            res->next = new ListNode(sum % 10);
            res = res->next;
            cur1 = cur1->next;
            cur2 = cur2->next;
        }
        
        if(cur1 != NULL) res->next = cur1;
        if(cur2 != NULL) res->next = cur2;

        while(carry && cur1 != NULL){
            int sum = cur1->val + carry;
            cur1->val = sum % 10;
            carry = sum / 10;
            cur1 = cur1->next;
            res = res->next;
        }
        while(carry && cur2 != NULL){
            int sum = cur2->val + carry;
            cur2->val = sum % 10;
            carry = sum / 10;
            cur2 = cur2->next;
            res = res->next;
        }
        
        if(carry){
            res->next = new ListNode(1);
        }
        return dummy->next;
    }
};

Optimized:
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* res = new ListNode(0);
        ListNode* dummy = res;
        ListNode *cur1 = l1, *cur2 = l2;
        int carry = 0;
        while(cur1 != NULL || cur2 != NULL){
            int val1 = (cur1 == NULL ? 0 : cur1->val);
            int val2 = (cur2 == NULL ? 0 : cur2->val);
            int sum = val1 + val2 + carry;
            res->next = new ListNode(sum % 10);
            res = res->next;
            carry = sum / 10;
            cur1 = (cur1 == NULL ? NULL : cur1->next);
            cur2 = (cur2 == NULL ? NULL : cur2->next);
        }
        
        if(carry) res->next = new ListNode(1);
        return dummy->next;
    }
};

Java:
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode dummy = new ListNode(0);
        ListNode cur = dummy;
        while(l1 != null || l2 != null){
            int num1 = (l1 == null) ? 0 : l1.val;
            int num2 = (l2 == null) ? 0 : l2.val;
            int sum = (num1 + num2 + carry) % 10;
            carry = (num1 + num2 + carry) / 10;
            cur.next = new ListNode(sum);
            cur = cur.next;
            l1 = (l1 == null) ? null : l1.next;
            l2 = (l2 == null) ? null : l2.next;
        }
        if(carry == 1) cur.next = new ListNode(1);
        return dummy.next;
    }
}
