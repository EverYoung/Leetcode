1. BFS
One important idea here is that we start from all gates at the same time, so that we can traverse all nodes only once instead of traverse
them many times and update the smallest distance.
The time complexity is O(mn) cause we traverse all node once in each loops respectively, in the worst case. And the space complexity is
O(mn) in the worst case, since we may have all nodes as gates and the queue's size will go up to m*n.

class Solution {
public:
    void wallsAndGates(vector<vector<int>>& rooms) {
        int x_size = rooms.size();
        if(!x_size) return;
        int y_size = rooms[0].size();
        queue<pair<int, int>> q;
        for(int i = 0; i < x_size; i++){
            for(int j = 0; j < y_size; j++){
                if(rooms[i][j] == 0){
                    q.push(pair<int, int>(i, j));
                }
            }
        }
        int distance = 1;
        while(!q.empty()){
            int q_size = q.size();
            for(int k = 0; k < q_size; k++){
                int cur_x = q.front().first;
                int cur_y = q.front().second;
                q.pop();
                if(cur_x > 0 && rooms[cur_x - 1][cur_y] == INT_MAX){
                    rooms[cur_x - 1][cur_y] = distance;
                    q.push(pair<int, int>(cur_x - 1, cur_y));
                }
                if(cur_y > 0 && rooms[cur_x][cur_y - 1] == INT_MAX){
                    rooms[cur_x][cur_y - 1] = distance;
                    q.push(pair<int, int>(cur_x, cur_y - 1));
                }
                if(cur_x < x_size - 1 && rooms[cur_x + 1][cur_y] == INT_MAX){
                    rooms[cur_x + 1][cur_y] = distance;
                    q.push(pair<int, int>(cur_x + 1, cur_y));
                }
                if(cur_y < y_size - 1 && rooms[cur_x][cur_y + 1] == INT_MAX){
                    rooms[cur_x][cur_y + 1] = distance;
                    q.push(pair<int, int>(cur_x, cur_y + 1));
                }
            }
            distance++;
        }
    }
};
