1. Merge Sort and Square

class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        vector<int> res = mergeSort(A, 0, A.size() - 1);
        for(int i = 0; i < res.size(); i++){
            res[i] = res[i] * res[i];
        }
        return res;
    }
    
    vector<int> mergeSort(vector<int>& A, int start, int end){
        if(start == end) return vector<int>(1, A[start]);
        int mid = start + (end - start) / 2;
        vector<int> left_half = mergeSort(A, start, mid);
        vector<int> right_half = mergeSort(A, mid + 1, end);
        return merge(left_half, right_half);
    }
    
    vector<int> merge(vector<int>& left_half, vector<int>& right_half){
        int i = 0, j = 0;
        vector<int> res;
        while(i < left_half.size() && j < right_half.size()){
            int square_i = left_half[i] * left_half[i];
            int square_j = right_half[j] * right_half[j];
            if(square_i <= square_j){
                res.push_back(left_half[i]);
                i++;
            }
            else{
                res.push_back(right_half[j]);
                j++;
            }
        }
        while(i < left_half.size()) res.push_back(left_half[i++]);
        while(j < right_half.size()) res.push_back(right_half[j++]);
        return res;
    }
};

2. Two Pointer
Find the position where element become positive, and left pointer from that position goes to the left, right goes to the right. Compare
and merge each time.

class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        int left = 0, right = 0;
        while(right < A.size() && A[right] < 0) right++;
        left = right - 1;
        
        vector<int> res;
        while(left >= 0 && right < A.size()){
            int square_left = A[left] * A[left];
            int square_right = A[right] * A[right];
            if(square_left <= square_right){
                res.push_back(square_left);
                left--;
            }
            else{
                res.push_back(square_right);
                right++;
            }
        }
        while(left >= 0){
            res.push_back(A[left] * A[left]);
            left--;
        }
        while(right < A.size()){
            res.push_back(A[right] * A[right]);
            right++;
        }
        return res;
    }
};
