Binary Indexed Tree

BIT get parent: index -= (index & -index)
1. 2's complement of index
2. AND with original index
3. subtract from original index

BIT get next:  index += (index & -index)
1. 2's complement of index
2. AND with original index
3. add to original index

build tree:
update with each value in the matrix(original individual values)
index order: current -> next

update tree:
update with difference between original value and the new value
index order: current -> parent

read value in tree:
keep getting parent indexes and add up all values in the tree


class NumMatrix {
public:
    NumMatrix(vector<vector<int>> matrix) {
        max_row = matrix.size();
        if(max_row == 0) return;
        max_col = matrix[0].size();
        nums = vector<vector<int>>(matrix);
        tree = vector<vector<int>>(max_row + 1, vector<int>(max_col + 1, 0));
        for(int i = 0; i < max_row; i++){
            for(int j = 0; j < max_col; j++){
                updateTree(i, j, nums[i][j]);
            }
        }
    }
    
    void update(int row, int col, int val) {
        if(val == nums[row][col]) return;
        updateTree(row, col, val - nums[row][col]);
        nums[row][col] = val;
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        return readTree(row2, col2) + readTree(row1 - 1, col1 - 1)
            - readTree(row1 - 1, col2) - readTree(row2, col1 - 1);
    }
    
    void updateTree(int row, int col, int val){
        for(int i = row + 1; i <= max_row; i = getTreeNext(i)){
            for(int j = col + 1; j <= max_col; j = getTreeNext(j)){
                tree[i][j] += val;
            }
        }
    }
    
    int getTreeParent(int idx){
        idx -= (idx & -idx);
        return idx;
    }
    
    int getTreeNext(int idx){
        idx += (idx & -idx);
        return idx;
    }
    
    int readTree(int row, int col){
        int res = 0;
        for(int i = row + 1; i > 0; i = getTreeParent(i)){
            for(int j = col + 1; j > 0; j = getTreeParent(j))
                res += tree[i][j];
        }
        return res;
    }
    
private:
    vector<vector<int>> tree;
    vector<vector<int>> nums;
    int max_row;
    int max_col;
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * obj->update(row,col,val);
 * int param_2 = obj->sumRegion(row1,col1,row2,col2);
 */
