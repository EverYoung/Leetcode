1. DFS

class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root) return 0;
        int min_len = INT_MAX;
        dfs(root, 0, min_len);
        return min_len;
    }
    
    void dfs(TreeNode* root, int len, int& min_len){
        if(!root) return;
        if(!root->left && !root->right) min_len = min(min_len, len + 1);
        dfs(root->left, len + 1, min_len);
        dfs(root->right, len + 1, min_len);
    }
};

2. BFS

class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root) return 0;
        int min_len = 1;
        
        queue<TreeNode*> q;
        q.push(root);
        
        while(!q.empty()){
            int node_num = q.size();
            for(int i = 0; i < node_num; i++){
                TreeNode* cur = q.front();
                q.pop();
                if(!cur->left && !cur->right) return min_len;
                if(cur->left) q.push(cur->left);
                if(cur->right) q.push(cur->right);
            }
            min_len++;
        }
    }
};
