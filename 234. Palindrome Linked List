1. Use Vector

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        vector<int> check;
        while(head != NULL){
            check.push_back(head->val);
            head = head->next;
        }
        for(int i = 0, j = check.size() - 1; i < j; i++, j--){
            if(check[i] != check[j]) return false;
        }
        return true;
    }
};

2. Spilt into Two Halves

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL) return true;
        ListNode *slow = head, *fast = head;
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        fast = head;
        ListNode *end = slow;
        slow = reverse(slow);
        while(fast != end){
            if(fast->val != slow->val) return false;
            fast = fast->next;
            slow = slow->next;
        }
        return true;
    }
    
    ListNode* reverse(ListNode* head){
        ListNode *prev = NULL, *cur = head, *temp = NULL;
        while(cur != NULL){
            temp = cur->next;
            cur->next = prev;
            prev = cur;
            cur = temp;
        }
        return prev;
    }
};
