class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        if(m == n) return head;
        if(m == 1) return reverse(head, n - m + 1);
        int count = 1;
        ListNode* cur = head;
        while(count < m - 1){
            cur = cur->next;
            count++;
        }
        cur->next = reverse(cur->next, n - m + 1);
        return head;
    }
    
    ListNode* reverse(ListNode* head, int len){
        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        ListNode *prev = dummy, *cur = head;
        while(len > 0){
            ListNode* temp = cur->next;
            cur->next = prev;
            prev = cur;
            cur = temp;
            len--;
        }
        head->next = cur;
        return prev;
    }
};

class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        ListNode *prev = NULL, *cur = head;
        int count = 1;
        while(count < m){
            prev = cur;
            cur = cur->next;
            count++;
        }
        
        ListNode *temp = NULL, *front = prev, *tail = cur;
        while(count <= n){
            temp = cur->next;
            cur->next = prev;
            prev = cur;
            cur = temp;
            count++;
        }
        
        tail->next = cur;
        if(front == NULL){
            head = prev;
        }
        else{
            front->next = prev;
        }
        
        return head;
    }
};
