1. Merge Sort

class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head == NULL) return head;
        return mergeSort(head);
    }
    
    ListNode* mergeSort(ListNode* head){
        if(head->next == NULL) return head;
        // Divide
        ListNode *fast = head, *slow = head;
        while(fast->next != NULL && fast->next->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode* temp = slow->next;
        slow->next = NULL;
        ListNode* half1 = mergeSort(head);
        ListNode* half2 = mergeSort(temp);
        return merge(half1, half2);
    }
    
    ListNode* merge(ListNode* l1, ListNode* l2){
        ListNode *dummy = new ListNode(0), *cur = dummy;
        while(l1 != NULL && l2 != NULL){
            if(l1->val < l2->val){
                cur->next = l1;
                l1 = l1->next;
            }
            else{
                cur->next = l2;
                l2 = l2->next;
            }
            cur = cur->next;
        }
        if(l1 != NULL) cur->next = l1;
        if(l2 != NULL) cur->next = l2;
        return dummy->next;
    }
};
