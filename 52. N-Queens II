1. DFS

class Solution {
public:
    int totalNQueens(int n) {
        int count = 0;
        vector<int> col_idxes;
        dfs(n, count, col_idxes);
        return count;
    }
    
    void dfs(int n, int& count, vector<int>& col_idxes){
        if(col_idxes.size() == n){
            count++;
            return;
        }
        
        int row_idx = col_idxes.size();
        for(int col_idx = 0; col_idx < n; col_idx++){
            if(isValid(col_idxes, col_idx)){
                col_idxes.push_back(col_idx);
                dfs(n, count, col_idxes);
                col_idxes.pop_back();
            }
        }
    }
    
    bool isValid(vector<int>& col_idxes, int col_idx){
        int row_idx = col_idxes.size();
        for(int r = 0; r < col_idxes.size(); r++){
            int c = col_idxes[r];
            if(r == row_idx || c == col_idx || r + c == row_idx + col_idx || r - c == row_idx - col_idx)
                return false;
        }
        return true;
    }
};

2. Optimized DFS storing hills and dales

class Solution {
public:
    int totalNQueens(int n) {
        int count = 0;
        vector<int> rows(n);
        vector<int> hills(4 * n - 1);
        vector<int> dales(2 * n - 1); 
        dfs(n, count, 0, rows, hills, dales);
        return count;
    }
    
    void dfs(int n, int& count, int row_idx, vector<int>& rows, vector<int>& hills, vector<int>& dales){
        if(row_idx == n){
            count++;
            return;
        }
        
        for(int col_idx = 0; col_idx < n; col_idx++){
            if(isValid(n, rows, hills, dales, row_idx, col_idx)){
                rows[col_idx] = 1;
                hills[row_idx - col_idx + 2 * n] = 1;
                dales[row_idx + col_idx] = 1;
                
                dfs(n, count, row_idx + 1, rows, hills, dales);
                
                rows[col_idx] = 0;
                hills[row_idx - col_idx + 2 * n] = 0;
                dales[row_idx + col_idx] = 0;
            }
        }
    }
    
    bool isValid(int n, vector<int>& rows, vector<int>& hills, vector<int>& dales, int row_idx, int col_idx){
        if(rows[col_idx] == 1 || hills[row_idx - col_idx + 2 * n] == 1 || dales[row_idx + col_idx] == 1) return false;
        else return true;
    }
};
