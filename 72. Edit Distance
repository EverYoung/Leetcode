This problem is a typical dynamic programming problem.
For word1[0, 1, ..., i, ... , m], word2[0, 1, ..., j, ... , n], we define dp[i][j] as the minimum number of operations that make 
word1[0, 1, ..., i-1] and word2[0, 1, ..., j-1] the same.
Then we discuss diffrent cases at each step: compare word1[i] and word2[j]

For word1[i-1] and word2[j-1]
There are 2 cases:
Case 1: word1[i-1] == word2[j-1]. In this case, the characters in both words are the same, so we don't need any operation at this step.
        Therefore, dp[i][j] == dp[i-1][j-1].
Case 2: word1[i-1] != word2[j-1]. If the two characters are not the same, then operation is needed at this step. There can be 3 kinds of Ops:
        (1) Replacement: we need to replace word1[i-1] with word2[j-1] which requires 1 operation, and also we need dp[i-1][j-1] operations 
            to make word1[0, 1, ..., i-2] and word2[0, 1, ..., j-2] the same. So dp[i][j] = dp[i-1][j-1] + 1.
        (2) Deletion: we need 1 operation to delete word1[i-1] and make word1[0, 1, ..., i-2] and word2[0, 1, ..., j-1] the same, which also
            means that word1[0, 1, ..., i-2] and word2[0, 1, ..., j-1] were actually the same. So dp[i][j] = dp[i-1][j] + 1.
        (3) Insertion: we need 1 operation to insert word2[j-1] to the end of word1 and make word1[0, 1, ..., i] and word2[0, 1, ..., j-1] 
            the same, which means that word1[0, 1, ..., i-1] and word2[0, 1, ..., j-2] are the same (word1[i] == word2[j-1]). So,
            dp[i][j] = dp[i][j-1] + 1.
Marginal Cases: From word1[0, 1, ..., i-1] to "", we need i deletion, so dp[i][0] = i; The same reason for dp[0][j] = j;
            
Code (in C++）：2D-Matrix version
class Solution{
public:
    int minDistance(string word1, string word2){
        int m = word1.size(), n = word2.size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0);
        for(int i = 1; i <= m; i++)
            dp[i][0] = i;
        for(int j = 1; j <= m; j++)
            dp[0][j] = j;
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (word1[i - 1] == word2[j - 1])
                    dp[i][j] = dp[i-1][j-1];
                else dp[i][j] = min(dp[i-1][j-1] + 1, min(dp[i-1][j] + 1, dp[i][j-1] + 1));
            }
        }
        return cur[m][n]; 
    }
}

Using simple vector instead of matrix:

class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.length(), n = word2.length();
        vector<int> dp(m + 1, 0);
        for (int i = 1; i <= m; i++)
            dp[i] = i;
        for (int j = 1; j <= n; j++) {
            int first = dp[0];
            dp[0] = j;
            for (int i = 1; i <= m; i++) {
                int temp = dp[i];
                if (word1[i - 1] == word2[j - 1]) 
                    dp[i] = first;
                else dp[i] = min(first + 1, min(dp[i] + 1, dp[i - 1] + 1));
                first = temp;
            }
        }
        return dp[m];
    }
};
