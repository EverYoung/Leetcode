Dynamic Programming problem.

The idea to solve this problem is that we create a bool matrix "dp" with size (n+1)*(m+1), in which n is the size of string 1, and m is the size of 
stirng 2. For each element in dp, say dp[i][j], it means the substring s1[0,1,...,i-1] and substring s2[0,1,...,j-1] can form the substring
s3[0,1,...,i+j-1].

Specifically, when we come to the character s3[i+j-1], their can be three cases:
Case 1: this character come from s1[i-1], then if dp[i-1][j] is true, dp[i][j] should also be true.
Case 2: this character come from s2[j-1], then if dp[i][j-1] is true, dp[i][j] should also be true.
Case 3: this character is the same with both s1[i-1] and s2[j-1], and dp[i][j] = dp[i-1][j] || dp[i][j-1].

For marginal cases:
When we alway have j=0, it means that whether s1[0,1,...,i-1] = s3[0,1,...,i-1]. So if s1[i-1] = s3[i-1], dp[i][0] = dp[i-1][0], otherwise false
When we alway have i=0, it means that whether s2[0,1,...,j-1] = s3[0,1,...,i-1]. So if s2[j-1] = s3[i-1], dp[0][j] = dp[0][j-1], otherwise false

Code is here:

class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int n = s1.size(), m = s2.size();
        if(m + n != s3.size()) return false;
        vector<vector<bool>> dp(n+1, vector<bool>(m+1, false));
        dp[0][0] = true;
        for(int i = 1; i <= n; i++){
            if(s3[i-1] == s1[i-1]) dp[i][0] = true;
            else break;
        }
        for(int j = 1; j <= m; j++){
            if(s3[j-1] == s2[j-1]) dp[0][j] = true;
            else break;
        }
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(s3[i+j-1] == s1[i-1]){
                    dp[i][j] = dp[i][j] || dp[i-1][j];
                }
                if(s3[i+j-1] == s2[j-1]){
                    dp[i][j] = dp[i][j] || dp[i][j-1];
                }
            }
        }
        return dp[n][m];
    }
};
